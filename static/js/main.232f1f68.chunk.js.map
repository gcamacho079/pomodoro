{"version":3,"sources":["Timer.js","utils/getNewValue.js","TimerConfig.js","beep.wav","styleSettings.js","Pomodoro.js","index.js"],"names":["ButtonRow","styled","div","Button","button","TimerCountdown","addLeadingZeroes","value","string","slice","formatTime","totalSeconds","minutes","Math","floor","seconds","minutesString","secondsString","Timer","props","id","activeSessionType","remainingTime","onClick","handleResetClick","handleStartStopClick","timerIsActive","getNewValue","currentValue","action","newValue","getStateProperty","property","includes","getInputMin","input","parseInt","getAttribute","getInputMax","TimerConfig","handleClick","bind","handleChange","event","target","stateProp","Number","isNaN","this","inputMin","inputMax","onIntervalChange","dataset","targetInput","parentNode","querySelector","htmlFor","onChange","min","max","type","breakLength","data-action","sessionLength","React","Component","styleSettings","colors","primary","secondary","fonts","heading","body","interval","PomodoroWrapper","Heading","h1","Pomodoro","state","timer","handleCountdown","rewindAudio","setState","clearInterval","document","play","audioElement","pause","currentTime","nextSessionType","getNextSessionType","lengthKey","newRemainingTime","playAudio","autoplayAudio","setInterval","resetTimer","pauseTimer","activateTimer","src","soundUrl","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.232f1f68.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst ButtonRow = styled.div`\n  display: grid;\n  grid-column-gap: 30px;\n  grid-template-columns: 1fr 1fr;\n`;\n\nconst Button = styled.button`\n  margin: 10px;\n  background-color: transparent;\n  color: black;\n  border-color: black;\n  border-width: 3px;\n  padding: 8px;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  font-size: 18px;\n  font-weight: 700;\n  cursor: pointer;\n`;\n\nconst TimerCountdown = styled.div`\n  font-size: 48px;\n  text-align: center;\n`;\n\nconst addLeadingZeroes = (value) => {\n  let string = value + '';\n  string = '00' + string;\n  const finalDigits = string.slice(-2);\n  return finalDigits;\n};\n\nconst formatTime = (totalSeconds) => {\n  const minutes = Math.floor(totalSeconds / 60);\n  const seconds = totalSeconds % 60;\n\n  const minutesString = addLeadingZeroes(minutes);\n  const secondsString = addLeadingZeroes(seconds);\n\n  const timeString = `${minutesString}:${secondsString}`;\n  return timeString;\n};\n\nconst Timer = (props) => {\n  return (\n    <>\n      <h2 id=\"timer-label\">{props.activeSessionType === 'session' ? 'Session' : 'Break'}</h2>\n      <TimerCountdown id=\"time-left\">{formatTime(props.remainingTime)}</TimerCountdown>\n      <ButtonRow>\n        <Button onClick={props.handleResetClick} id=\"reset\">Reset</Button>\n        <Button onClick={props.handleStartStopClick} id=\"start_stop\">\n          {props.timerIsActive ? 'Stop' : 'Start'}\n        </Button>\n      </ButtonRow>\n    </>\n  )\n};\n\nexport default Timer;\n","const getNewValue = (currentValue, action) => {\n  let newValue;\n  switch(action) {\n    case 'increment':\n      newValue = currentValue + 1;\n      break;\n    case 'decrement':\n      newValue = currentValue - 1;\n      break;\n    default:\n      newValue = currentValue;\n  }\n  return newValue;\n};\n\nexport default getNewValue;\n","import React from 'react';\nimport getNewValue from './utils/getNewValue';\nimport styled from 'styled-components';\n\nconst getStateProperty = (id) => {\n  let property = '';\n\n  if (id.includes('break')) {\n    property = 'breakLength';\n  } else if (id.includes('session')) {\n    property = 'sessionLength';\n  }\n\n  return property;\n};\n\nconst getInputMin = (input) => parseInt(input.getAttribute('min'), 10);\n\nconst getInputMax = (input) => parseInt(input.getAttribute('max'), 10);\nclass TimerConfig extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    const { target } = event;\n    const value = parseInt(target.value, 10);\n    const stateProp = getStateProperty(target.id);\n\n    if (Number.isNaN(value)) return this.props[stateProp];\n\n    const inputMin = getInputMin(target);\n    const inputMax = getInputMax(target);\n\n    if (value < inputMin \n     || value > inputMax) return;\n\n    this.props.onIntervalChange(stateProp, value);\n  }\n\n  handleClick(event) {\n    const { target } = event;\n    const { action } = target.dataset;\n    const parentNode = target.parentNode;\n    const targetInput = parentNode.querySelector('input');\n    const stateProp = getStateProperty(target.id);\n    const newValue = getNewValue(this.props[stateProp], action);\n    const inputMin = getInputMin(targetInput);\n    const inputMax = getInputMax(targetInput);\n\n    if (newValue < inputMin || newValue > inputMax) return;\n\n    this.props.onIntervalChange(stateProp, newValue);\n  }\n\n  render() {\n    return (\n      <>\n        <div>\n          <label id=\"break-label\" htmlFor=\"break-length\">Break Length</label>\n          <input onChange={this.handleChange} min=\"1\" max=\"60\" type=\"number\" id=\"break-length\" value={this.props.breakLength} />\n          <button onClick={this.handleClick} data-action=\"decrement\" id=\"break-decrement\">-</button>\n          <button onClick={this.handleClick} data-action=\"increment\" id=\"break-increment\">+</button>\n        </div>\n        <div>\n          <label id=\"session-label\">Session Length</label>\n          <input onChange={this.handleChange} min=\"1\" max=\"60\" type=\"number\" id=\"session-length\" value={this.props.sessionLength}/>\n          <button onClick={this.handleClick} data-action=\"decrement\" id=\"session-decrement\">-</button>\n          <button onClick={this.handleClick} data-action=\"increment\" id=\"session-increment\">+</button>\n        </div>\n      </>\n    )\n  }\n};\n\nexport default TimerConfig;\n","export default __webpack_public_path__ + \"static/media/beep.0be65f23.wav\";","const styleSettings = {\n  colors: {\n    primary: '#FFDDFF',\n    secondary: '#442C81',\n  },\n  fonts: {\n    heading: 'Rakkas, serif',\n    body: 'Cairo, sans-serif',\n  }\n  \n};\n\nexport default styleSettings;\n","import React from 'react';\nimport Timer from './Timer';\nimport TimerConfig from './TimerConfig';\nimport soundUrl from './beep.wav';\nimport styled from 'styled-components';\nimport styleSettings from './styleSettings';\n\nconst PomodoroWrapper = styled.div`\n  font-family: ${styleSettings.fonts.body};\n  max-width: 600px;\n  background-color: ${styleSettings.colors.primary};\n  color: #000000;\n  padding: 30px;\n  margin: 30px auto;\n  box-shadow: 5px 5px 0;\n`;\n\nconst Heading = styled.h1`\n  text-align: center;\n  font-size: 48px;\n  font-family: ${styleSettings.fonts.heading};\n`;\n\n\nlet interval;\nclass Pomodoro extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeSessionType: 'session',\n      breakLength: 5,\n      sessionLength: 25,\n      remainingTime: 1500,\n      timerIsActive: false,\n      timer: null,\n    }\n\n    this.onIntervalChange = this.onIntervalChange.bind(this);\n    this.handleCountdown = this.handleCountdown.bind(this);\n    this.handleStartStopClick = this.handleStartStopClick.bind(this);\n    this.handleResetClick = this.handleResetClick.bind(this);\n  }\n\n  resetTimer() {\n    this.rewindAudio();\n    this.setState(({\n      timerIsActive: false,\n      remainingTime: this.state.sessionLength * 60,\n      activeSessionType: 'session',\n    }), () => {\n      clearInterval(interval);\n    });\n  }\n\n  pauseTimer() {\n    this.setState(({\n      timerIsActive: false,\n    }), () => {\n      clearInterval(interval);\n    });\n  }\n\n  playAudio() {\n    const audioElement = document.querySelector('#beep');\n    audioElement.play();\n  }\n\n  rewindAudio() {\n    const audioElement = document.querySelector('#beep');\n    audioElement.pause();\n    audioElement.currentTime = 0;\n  }\n \n  getNextSessionType() {\n    switch(this.state.activeSessionType) {\n      case 'session':\n        return 'break';\n      case 'break':\n        return 'session';\n      default:\n        return 'session';\n    }\n  }\n\n  handleCountdown() {\n    if (this.state.remainingTime !== 0) {\n      this.setState(({\n        remainingTime: this.state.remainingTime - 1,\n      }));\n    } else {\n      const nextSessionType = this.getNextSessionType();\n      const lengthKey = `${nextSessionType}Length`;\n      const newRemainingTime = this.state[lengthKey] * 60;\n      this.playAudio();\n      \n      this.setState(({\n        activeSessionType: nextSessionType,\n        autoplayAudio: true,\n        remainingTime: newRemainingTime,\n      }));\n    }\n  }\n\n  activateTimer() {\n    this.setState(({\n      timerIsActive: true,\n    }), () => {\n      interval = setInterval(this.handleCountdown, 1000);\n    });\n  }\n\n  onIntervalChange(property, value) {\n    this.setState(({\n      [property]: value,\n    }), this.resetTimer);\n  }\n\n  handleStartStopClick() {\n    if (!this.state.timerIsActive) {\n      this.activateTimer();\n    } else {\n      this.pauseTimer();\n    }\n  }\n\n  handleResetClick() {\n    this.setState(({\n      sessionLength: 25,\n      breakLength: 5,\n    }), this.resetTimer);\n  }\n\n  render() {\n    return (\n      <PomodoroWrapper>\n        <Heading>Pomodoro</Heading>\n        <TimerConfig \n          onIntervalChange={this.onIntervalChange} \n          breakLength={this.state.breakLength} \n          sessionLength={this.state.sessionLength}/>\n        <Timer \n          activeSessionType={this.state.activeSessionType} \n          timerIsActive={this.state.timerIsActive} \n          remainingTime={this.state.remainingTime}\n          handleResetClick={this.handleResetClick}\n          handleStartStopClick={this.handleStartStopClick}/>\n        <audio id=\"beep\" src={soundUrl}/>\n      </PomodoroWrapper>\n    );\n  }\n}\n\nexport default Pomodoro;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Pomodoro from './Pomodoro';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Pomodoro />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}