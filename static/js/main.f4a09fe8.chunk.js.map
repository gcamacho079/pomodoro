{"version":3,"sources":["styleSettings.js","style.js","Timer.js","utils/getNewValue.js","TimerConfig.js","beep.wav","Pomodoro.js","index.js"],"names":["styleSettings","colors","primary","secondary","fonts","heading","body","units","spacer","spacer_large","spacer_small","Button","styled","button","TimeControls","div","Label","label","ControlRow","TimerLabel","h2","ButtonRow","TimerCountdown","TimerWrapper","addLeadingZeroes","value","string","slice","formatTime","totalSeconds","minutes","Math","floor","seconds","minutesString","secondsString","Timer","props","id","activeSessionType","remainingTime","onClick","handleResetClick","handleStartStopClick","timerIsActive","getNewValue","currentValue","action","newValue","labelText","getStateProperty","property","includes","getInputMin","input","parseInt","getAttribute","getInputMax","TimerConfig","handleClick","bind","handleChange","event","target","stateProp","Number","isNaN","this","inputMin","inputMax","onIntervalChange","dataset","targetInput","parentNode","querySelector","htmlFor","data-action","aria-label","onChange","min","max","type","breakLength","sessionLength","React","Component","interval","PomodoroWrapper","main","Heading","h1","Pomodoro","state","timer","handleCountdown","rewindAudio","setState","clearInterval","document","play","audioElement","pause","currentTime","nextSessionType","getNextSessionType","lengthKey","newRemainingTime","playAudio","autoplayAudio","setInterval","resetTimer","pauseTimer","activateTimer","src","soundUrl","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f4a09fe8.chunk.js","sourcesContent":["const styleSettings = {\n  colors: {\n    primary: '#FFDDFF',\n    secondary: '#442C81',\n  },\n  fonts: {\n    heading: 'Rakkas, serif',\n    body: 'Cairo, sans-serif',\n  },\n  units: {\n    spacer: '30px',\n    spacer_large: '60px',\n    spacer_small: '15px',\n  }  \n};\n\nexport default styleSettings;\n","import styled from 'styled-components';\nimport styleSettings from './styleSettings';\n\nexport const Button = styled.button`\n  background-color: transparent;\n  color: black;\n  border-color: black;\n  border-width: 3px;\n  padding: 5px;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  font-size: 18px;\n  font-weight: 700;\n  cursor: pointer;\n`;\n\nexport const TimeControls = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n`;\n\nexport const Label = styled.label`\n  font-size: 20px;\n  text-align: center;\n  display: block;\n  margin-bottom: ${styleSettings.units.spacer_small};\n`;\n\nexport const ControlRow = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-column-gap: ${styleSettings.units.spacer};\n`;\n\nexport const TimerLabel = styled.h2`\n  text-align: center;\n`;\n\nexport const ButtonRow = styled.div`\n  display: grid;\n  grid-column-gap: 30px;\n  grid-template-columns: 1fr 1fr;\n`;\n\nexport const TimerCountdown = styled.div`\n  margin: ${styleSettings.units.spacer} 0;\n  font-size: 48px;\n  text-align: center;\n`;\n\nexport const TimerWrapper = styled.div`\n  margin: ${styleSettings.units.spacer_large} 0;\n`;","import { Button, TimerLabel, ButtonRow, TimerCountdown, TimerWrapper } from './style';\n\nconst addLeadingZeroes = (value) => {\n  let string = value + '';\n  string = '00' + string;\n  const finalDigits = string.slice(-2);\n  return finalDigits;\n};\n\nconst formatTime = (totalSeconds) => {\n  const minutes = Math.floor(totalSeconds / 60);\n  const seconds = totalSeconds % 60;\n\n  const minutesString = addLeadingZeroes(minutes);\n  const secondsString = addLeadingZeroes(seconds);\n\n  const timeString = `${minutesString}:${secondsString}`;\n  return timeString;\n};\n\nconst Timer = (props) => {\n  return (\n    <TimerWrapper>\n      <TimerLabel id=\"timer-label\">{props.activeSessionType === 'session' ? 'Session' : 'Break'}</TimerLabel>\n      <TimerCountdown id=\"time-left\">{formatTime(props.remainingTime)}</TimerCountdown>\n      <ButtonRow>\n        <Button onClick={props.handleResetClick} id=\"reset\">Reset</Button>\n        <Button onClick={props.handleStartStopClick} id=\"start_stop\">\n          {props.timerIsActive ? 'Stop' : 'Start'}\n        </Button>\n      </ButtonRow>\n    </TimerWrapper>\n  )\n};\n\nexport default Timer;\n","const getNewValue = (currentValue, action) => {\n  let newValue;\n  switch(action) {\n    case 'increment':\n      newValue = currentValue + 1;\n      break;\n    case 'decrement':\n      newValue = currentValue - 1;\n      break;\n    default:\n      newValue = currentValue;\n  }\n  return newValue;\n};\n\nexport default getNewValue;\n","import React from 'react';\nimport getNewValue from './utils/getNewValue';\nimport { Button, TimeControls, Label, ControlRow,  } from './style';\n\nexport const labelText = {\n  increment: 'Add 1 minute',\n  decrement: 'Remove 1 minute',\n}\n\nconst getStateProperty = (id) => {\n  let property = '';\n\n  if (id.includes('break')) {\n    property = 'breakLength';\n  } else if (id.includes('session')) {\n    property = 'sessionLength';\n  }\n\n  return property;\n};\n\nconst getInputMin = (input) => parseInt(input.getAttribute('min'), 10);\n\nconst getInputMax = (input) => parseInt(input.getAttribute('max'), 10);\nclass TimerConfig extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    const { target } = event;\n    const value = parseInt(target.value, 10);\n    const stateProp = getStateProperty(target.id);\n\n    if (Number.isNaN(value)) return this.props[stateProp];\n\n    const inputMin = getInputMin(target);\n    const inputMax = getInputMax(target);\n\n    if (value < inputMin \n     || value > inputMax) return;\n\n    this.props.onIntervalChange(stateProp, value);\n  }\n\n  handleClick(event) {\n    const { target } = event;\n    const { action } = target.dataset;\n    const parentNode = target.parentNode;\n    const targetInput = parentNode.querySelector('input');\n    const stateProp = getStateProperty(target.id);\n    const newValue = getNewValue(this.props[stateProp], action);\n    const inputMin = getInputMin(targetInput);\n    const inputMax = getInputMax(targetInput);\n\n    if (newValue < inputMin || newValue > inputMax) return;\n\n    this.props.onIntervalChange(stateProp, newValue);\n  }\n\n  render() {\n    return (\n      <ControlRow>\n        <div>\n          <Label id=\"break-label\" htmlFor=\"break-length\">Break Length</Label>\n          <TimeControls>\n            <Button \n              onClick={this.handleClick} \n              data-action=\"decrement\" \n              id=\"break-decrement\"\n              aria-label={labelText.decrement}>-</Button>\n            <input onChange={this.handleChange} min=\"1\" max=\"60\" type=\"number\" id=\"break-length\" value={this.props.breakLength} />\n            <Button \n              onClick={this.handleClick} \n              data-action=\"increment\" \n              id=\"break-increment\"\n              aria-label={labelText.increment}>+</Button>\n          </TimeControls>\n        </div>\n        <div>\n          <Label id=\"session-label\" htmlFor=\"session-length\">Session Length</Label>\n          <TimeControls>\n            <Button \n              onClick={this.handleClick} \n              data-action=\"decrement\" \n              id=\"session-decrement\"\n              aria-label={labelText.decrement}>-</Button>\n            <input onChange={this.handleChange} min=\"1\" max=\"60\" type=\"number\" id=\"session-length\" value={this.props.sessionLength}/>\n            <Button \n              onClick={this.handleClick} \n              data-action=\"increment\" \n              id=\"session-increment\"\n              aria-label={labelText.increment}>+</Button>\n          </TimeControls>\n        </div>\n      </ControlRow>\n    )\n  }\n};\n\nexport default TimerConfig;\n","export default __webpack_public_path__ + \"static/media/beep.0be65f23.wav\";","import React from 'react';\nimport Timer from './Timer';\nimport TimerConfig from './TimerConfig';\nimport soundUrl from './beep.wav';\nimport styled from 'styled-components';\nimport styleSettings from './styleSettings';\n\nconst PomodoroWrapper = styled.main`\n  font-family: ${styleSettings.fonts.body};\n  max-width: 600px;\n  background-color: ${styleSettings.colors.primary};\n  color: #000000;\n  padding: 30px;\n  margin: 30px auto;\n  box-shadow: 5px 5px 0;\n`;\n\nconst Heading = styled.h1`\n  text-align: center;\n  font-size: 48px;\n  font-family: ${styleSettings.fonts.heading};\n`;\n\n\nlet interval;\nclass Pomodoro extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeSessionType: 'session',\n      breakLength: 5,\n      sessionLength: 25,\n      remainingTime: 1500,\n      timerIsActive: false,\n      timer: null,\n    }\n\n    this.onIntervalChange = this.onIntervalChange.bind(this);\n    this.handleCountdown = this.handleCountdown.bind(this);\n    this.handleStartStopClick = this.handleStartStopClick.bind(this);\n    this.handleResetClick = this.handleResetClick.bind(this);\n  }\n\n  resetTimer() {\n    this.rewindAudio();\n    this.setState(({\n      timerIsActive: false,\n      remainingTime: this.state.sessionLength * 60,\n      activeSessionType: 'session',\n    }), () => {\n      clearInterval(interval);\n    });\n  }\n\n  pauseTimer() {\n    this.setState(({\n      timerIsActive: false,\n    }), () => {\n      clearInterval(interval);\n    });\n  }\n\n  playAudio() {\n    const audioElement = document.querySelector('#beep');\n    audioElement.play();\n  }\n\n  rewindAudio() {\n    const audioElement = document.querySelector('#beep');\n    audioElement.pause();\n    audioElement.currentTime = 0;\n  }\n \n  getNextSessionType() {\n    switch(this.state.activeSessionType) {\n      case 'session':\n        return 'break';\n      case 'break':\n        return 'session';\n      default:\n        return 'session';\n    }\n  }\n\n  handleCountdown() {\n    if (this.state.remainingTime !== 0) {\n      this.setState(({\n        remainingTime: this.state.remainingTime - 1,\n      }));\n    } else {\n      const nextSessionType = this.getNextSessionType();\n      const lengthKey = `${nextSessionType}Length`;\n      const newRemainingTime = this.state[lengthKey] * 60;\n      this.playAudio();\n      \n      this.setState(({\n        activeSessionType: nextSessionType,\n        autoplayAudio: true,\n        remainingTime: newRemainingTime,\n      }));\n    }\n  }\n\n  activateTimer() {\n    this.setState(({\n      timerIsActive: true,\n    }), () => {\n      interval = setInterval(this.handleCountdown, 1000);\n    });\n  }\n\n  onIntervalChange(property, value) {\n    this.setState(({\n      [property]: value,\n    }), this.resetTimer);\n  }\n\n  handleStartStopClick() {\n    if (!this.state.timerIsActive) {\n      this.activateTimer();\n    } else {\n      this.pauseTimer();\n    }\n  }\n\n  handleResetClick() {\n    this.setState(({\n      sessionLength: 25,\n      breakLength: 5,\n    }), this.resetTimer);\n  }\n\n  render() {\n    return (\n      <PomodoroWrapper>\n        <Heading>Pomodoro</Heading>\n        <TimerConfig \n          onIntervalChange={this.onIntervalChange} \n          breakLength={this.state.breakLength} \n          sessionLength={this.state.sessionLength}/>\n        <Timer \n          activeSessionType={this.state.activeSessionType} \n          timerIsActive={this.state.timerIsActive} \n          remainingTime={this.state.remainingTime}\n          handleResetClick={this.handleResetClick}\n          handleStartStopClick={this.handleStartStopClick}/>\n        <audio id=\"beep\" src={soundUrl}/>\n      </PomodoroWrapper>\n    );\n  }\n}\n\nexport default Pomodoro;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Pomodoro from './Pomodoro';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Pomodoro />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}